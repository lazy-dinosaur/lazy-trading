import{r as d,ac as f,A as u,ad as m}from"./index--mJaizsc.js";const p=async n=>{if(n){const{bybit:s,binance:t,bitget:r}=n,[c,a,i,o,b,y]=await Promise.all([s.ccxt.fetchTickers(void 0,{type:"swap",subType:"inverse"}),s.ccxt.fetchTickers(void 0,{type:"swap",subType:"linear"}),t.ccxt.fetchTickers(void 0,{type:"swap",subType:"inverse"}),t.ccxt.fetchTickers(void 0,{type:"swap",subType:"linear"}),r.ccxt.fetchTickers(void 0,{type:"swap",subType:"inverse"}),r.ccxt.fetchTickers(void 0,{type:"swap",subType:"linear"})]);return[...Object.values(c).filter(e=>!e.symbol.includes("-")&&!e.symbol.includes("_")).map(e=>({...e,exchange:"bybit"})),...Object.values(a).filter(e=>!e.symbol.includes("-")&&!e.symbol.includes("_")).map(e=>({...e,exchange:"bybit"})),...Object.values(i).filter(e=>!e.symbol.includes("-")&&!e.symbol.includes("_")&&!e.symbol.includes("BUSD")&&e.symbol.includes(":")).map(e=>({...e,exchange:"binance"})),...Object.values(o).filter(e=>!e.symbol.includes("-")&&!e.symbol.includes("_")&&!e.symbol.includes("BUSD")&&e.symbol.includes(":")).map(e=>({...e,exchange:"binance"})),...Object.values(b).filter(e=>!e.symbol.includes("-")&&!e.symbol.includes("_")&&e.symbol.includes(":")).map(e=>({...e,exchange:"bitget"})),...Object.values(y).filter(e=>!e.symbol.includes("-")&&!e.symbol.includes("_")&&e.symbol.includes(":")).map(e=>({...e,exchange:"bitget"}))]}},T=async({ccxt:n,exchange:s,symbol:t})=>{if(n)return await n[s].ccxt.fetchTicker(t)},h=async(n,s,t)=>{var r;if(!(n!=null&&n[s]))throw new Error("Exchange instance not initialized");try{const c=n[s].ccxt;await c.loadMarkets();const a=c.market(t),i=(r=a.limits.leverage)==null?void 0:r.max;return{...a,maxLeverage:i}}catch(c){return console.error("Error fetching market info:",c),null}},l=()=>{const n=d.useContext(f);if(n===void 0)throw new Error("useCCXT must be used within a CCXTProvider");return n.exchanges},x=()=>{const n=l();return u({queryKey:["allTickers",m],queryFn:async()=>n&&await p(n),refetchInterval:1e3*30,enabled:!!n})},g=({exchange:n,symbol:s})=>{const t=l();return u({queryKey:[n,s,"ticker"],queryFn:async()=>t?await T({ccxt:t,exchange:n,symbol:s}):void 0,enabled:!!t&&!!n&&!!s,refetchInterval:500,refetchIntervalInBackground:!0,refetchOnMount:!0})},w=(n,s)=>{const t=l();return u({queryKey:[n,s,"market"],queryFn:()=>t&&h(t,n,s),enabled:!!t&&!!n&&!!s})};export{l as a,w as b,g as c,x as u};
